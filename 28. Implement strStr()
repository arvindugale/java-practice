Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Example 1:

Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1
Clarification:

What should we return when needle is an empty string? This is a great question to ask during an interview.

For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().

class Solution {
    public int strStr(String haystack, String needle) {

		if (haystack == null || needle.length() > haystack.length()) {
			return -1;
		}

		if (needle == null || needle.length() == 0) {
			return 0;
		}

		for (int i = 0; i <= haystack.length() - needle.length(); i++)
		{
			int j;
			for (j = 0; j < needle.length(); j++) {
				if (needle.charAt(j) != haystack.charAt(i + j)) {
					break;
				}
			}

			if (j == needle.length()) {
				return i;
			}
		}

		return -1;
    }
}

Recursive
class StringUtils
{
	// Recursive function to implement strstr() function
	public static String strstr(String X, String Y)
	{
		if (Y == null || Y.length() == 0)
			return X;

		for (int i = 0; i < X.length(); i++)
		{
			if (X.charAt(i) == Y.charAt(0))
			{
				String s = strstr(X.substring(i + 1), Y.substring(1));
				return (s != null) ? X.charAt(i) + s : null;
			}
		}

		return null;
	}

	// Implement strstr function in Java
	public static void main(String[] args)
	{
		String X = "Techie Delight - Coding made easy";
		String Y = "Coding";

		System.out.println(strstr(X, Y));
	}
}

KMP
class StringUtils
{
	// Function to implement strstr() function using KMP algorithm
	public static int strstr(String X, String Y)
	{
		// Base Case 1: Y is null or empty
		if (Y == null || Y.length() == 0) {
			return 0;
		}

		// Base Case 2: X is null or X's length is less than that of Y's
		if (X == null || Y.length() > X.length()) {
			return -1;
		}

		char[] chars = Y.toCharArray();

		// next[i] stores the index of next best partial match
		int[] next = new int[Y.length() + 1];
		for (int i = 1; i < Y.length(); i++)
		{
			int j = next[i + 1];

			while (j > 0 && chars[j] != chars[i]) {
				j = next[j];
			}

			if (j > 0 || chars[j] == chars[i]) {
				next[i + 1] = j + 1;
			}
		}

		for (int i = 0, j = 0; i < X.length(); i++)
		{
			if (j < Y.length() && X.charAt(i) == Y.charAt(j))
			{
				if (++j == Y.length()) {
					return (i - j + 1);
				}
			}
			else if (j > 0)
			{
				j = next[j];
				i--;	// as i will be incremented in next iteration
			}
		}

		return -1;
	}

	// Implement strstr function in Java
	public static void main(String[] args)
	{
		String X = "Techie Delight";
		String Y = "light";

		System.out.println("Index of first occurrence of Y in X is " 
						+ strstr(X, Y));
	}
}
